import { API_ROUTES } from "../routes/apiRoute";

// Define interfaces for requests and responses
interface CreatePatientRequest {
  name: string;
  age: number;
  diseases: string;
  allergies: string;
  roomNumber: string;
  bedNumber: string;
  floorNumber: number;
  gender: string;
  contactInfo: string;
  emergencyContact: string;
}

interface UpdatePatientRequest extends CreatePatientRequest {
  id: string;  // ID is required for updating a patient
}

export const getAllPatients = async () => {
  try {
    const token = localStorage.getItem("token");
    const response = await fetch(API_ROUTES.PATIENTS, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    if (response.ok) {
      const data = await response.json();
      return data;
    } else {
      throw new Error("Failed to fetch patients");
    }
  } catch (error) {
    console.error(error);
    return null;
  }
};

export const getSinglePatients = async (id: string) => {
  try {
    const token = localStorage.getItem("token");
    const response = await fetch( `${API_ROUTES.PATIENTS}/${id}`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    if (response.ok) {
      const data = await response.json();
      return data;
    } else {
      throw new Error("Failed to fetch patients");
    }
  } catch (error) {
    console.error(error);
    return null;
  }
};

export const createPatient = async (patientData: CreatePatientRequest) => {
  try {
    const token = localStorage.getItem("token");
    const response = await fetch(API_ROUTES.PATIENTS, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify(patientData),
    });
    if (response.ok) {
      const newPatient = await response.json();
      return newPatient;  // ID will be generated by the backend
    } else {
      throw new Error("Failed to create patient");
    }
  } catch (error) {
    console.error(error);
    return null;
  }
};
interface UpdatePatientRequest {
  id: string;
  name: string;
  age: number;
  diseases: string;
  allergies: string;
  gender: string;
  contactInfo: string;
  emergencyContact: string;
  roomNumber: string;
  bedNumber: string;
  floorNumber: number;
  dietPlans: Array<{
    id?: string;
    name: string;
    description: string;
    startDate: Date;
    endDate: Date;
  }>;
}

export const updatePatient = async (patientData: UpdatePatientRequest) => {
  try {
    const token = localStorage.getItem("token");
    
    // Destructure and exclude id
    const { id, ...patientWithoutId } = patientData;
    
    // Transform diet plans to match Prisma's expected format
    const formattedData = {
      ...patientWithoutId,
      dietPlans: {
        updateMany: patientWithoutId.dietPlans.map(plan => ({
          where: { id: plan.id },
          data: {
            name: plan.name,
            description: plan.description,
            startDate: plan.startDate,
            endDate: plan.endDate
          }
        }))
      }
    };

    const response = await fetch(
      `${API_ROUTES.PATIENTS}/${id}`,
      {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(formattedData),
      }
    );

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || "Failed to update patient");
    }

    return await response.json();
  } catch (error) {
    console.error("Update patient error:", error);
    throw error; // Re-throw to handle in component
  }
};

export const deletePatient = async (id: string) => {
    try {
        const token = localStorage.getItem("token");
        const response = await fetch(`${API_ROUTES.PATIENTS}/${id}`, {
            method: "DELETE",
            headers: {
                Authorization: `Bearer ${token}`,
            },
        });
        if (response.ok) {
            return true;
        } else {
            throw new Error("Failed to delete patient");
        }
    } catch (error) {
        console.error(error);
        return false;
    }
};